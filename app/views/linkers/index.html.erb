<div class="col-xs-12 col-md-9">

<h1>URL Diagnostics</h1>

<%= form_tag({action: :uploader}, multipart: true, class: 'form') do %>
  <div class="form-group">
    <%= file_field_tag 'CSVfile' %>
  </div>
  <div class="form-group">
    <%= label_tag %>
    <%= text_field_tag 'search-term', "", {:placeholder => 'Search term here', :class => 'form-control'} %>
  </div>
  <%= submit_tag 'Process URLs', class: 'btn btn-default' %>
  <button class='btn btn-default' id='test-button'>Test</button>
<% end %>

<div id="test-results">
  <table class="table">
    <thead>
      <tr>
        <th>URL</th>
        <th>HTTP code</th>
        <th>HTTP status</th>
        <th>Redirect</th>
        <th>Search term exists?</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>
</div>

<script>
$(function() {
  $('#test-button').click(function(e) {
    e.preventDefault();
    $('#test-results').show();
    readCSVFile();
  });

  var readCSVFile = function() {
    var csvContents = document.getElementById("CSVfile").files[0],
        reader = new FileReader(),
        tbdy = $('#test-results tbody')[0];

    reader.onload = function(event) {
      var lines = reader.result.split('\n');

      lines.forEach(function(line) {
        var $tr = $('<tr>'),
            request = new XMLHttpRequest(),
            url = '<%= ping_url_path %>?url_string=' + encodeURIComponent(line) + '&search_term=' + encodeURIComponent($('#search-term').val());

        $tr.append($('<td>' + line + '</td>'));
        request.open('GET', url);
        request.onreadystatechange = function() {
          if (request.status === 200 && request.readyState === XMLHttpRequest.DONE) {
            var response = JSON.parse(request.responseText);
            response.forEach(function(item) {
              $tr.append($('<td>' + item + '</td>'));
            });
            $('#test-results tbody').append($tr);
          }
        };
        request.send();
      });
    };

    reader.readAsText(csvContents);
  };
});

</script>

<p>&nbsp;</p>

<h3>Instructions</h3>
<p/>
Choose a CSV file -- <em>it must be in CSV format only</em> -- and upload it here. The file must have <em>NO</em> header row, and the last column must be a list of URLs including the leading "http://" or "https://" portions. If you wish to include additional columns, they must all be placed to the left of this URLs column. All columns in your CSV file will be included in the processed output file.
<p/>
<strong>To avoid taxing the web page servers, only the first 50 rows of any CSV file will be processed.</strong> If you need to process more than 50 rows, break up your list into multiple CSV files.
<p/>
Once you've hit the "Process URLs" button, do <em>NOT</em> press the button again. Just wait until the app has pinged all of the URLs, at which point a popup window will appear to save the results to a new CSV file. This new file will contain all of the original file's columns, as well as four additional ones:
<p/>
1) HTTP Code
<br>
2) HTTP Message
<br>
3) Redirect (if applicable): up to 5 successive redirects for any given URL will be pinged, and the last one will be returned
<br>
4) Search term existence (if applicable): if a search term has been entered, indicates whether it exists in the returned HTML

</div>
