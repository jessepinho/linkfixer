<div class="col-xs-12 col-md-9">

<h1>URL Diagnostics</h1>

<%= form_tag({action: :uploader}, multipart: true, class: 'form') do %>
  <div class="form-group">
    <%= file_field_tag 'CSVfile' %>
  </div>
  <div class="form-group">
    <%= label_tag %>
    <%= text_field_tag 'search_term', "", {:placeholder => 'Search term here', :class => 'form-control'} %>
  </div>
  <%= submit_tag 'Process URLs', class: 'btn btn-default' %>
  <%= link_to 'Test', 'javascript:void(0)', :onclick => 'readCSVFile()', class: 'btn btn-default' %>
<% end %>

<div id="testdiv"></div>

<script>
function readCSVFile() {

  var tbl = document.createElement('table'); tbl.className = "table";
  var thd = document.createElement('thead');
  var thdr = document.createElement('tr');
  var tbdy = document.createElement('tbody');
  var th1 = document.createElement('th'); th1.appendChild(document.createTextNode('URL'));
  var th2 = document.createElement('th'); th2.appendChild(document.createTextNode('HTTP Code'));
  var th3 = document.createElement('th'); th3.appendChild(document.createTextNode('HTTP Status'));
  var th4 = document.createElement('th'); th4.appendChild(document.createTextNode('Redirect'));
  var th5 = document.createElement('th'); th5.appendChild(document.createTextNode('Search Term Exists?'));

  thdr.appendChild(th1);
  thdr.appendChild(th2);
  thdr.appendChild(th3);
  thdr.appendChild(th4);
  thdr.appendChild(th5);

  thd.appendChild(thdr);
  tbl.appendChild(thd);
  tbl.appendChild(tbdy);

  document.getElementById('testdiv').appendChild(tbl);

  var csv_list = document.getElementById("CSVfile").files[0];
  var reader = new FileReader();

  reader.onload = function(event) {

    var lines = reader.result.split('\n');

    for(var i = 0; i < lines.length; i+=1) {

      var new_row = document.createElement('tr');
      var new_cell = document.createElement('td'); new_cell.appendChild(document.createTextNode(lines[i]));
      new_row.appendChild(new_cell);

      var xhttp = new XMLHttpRequest();
      xhttp.open("GET", "<%= ping_url_path %>?url_string=" + encodeURIComponent(lines[i]) + "&search_term=" + encodeURIComponent(document.getElementById('search_term').value), false);
      xhttp.send();
      if (xhttp.readyState == 4 && xhttp.status == 200) {
        console.log(xhttp.responseText);
        new_cell = document.createElement('td'); new_cell.appendChild(document.createTextNode(JSON.parse(xhttp.responseText)[0])); new_row.appendChild(new_cell);
        new_cell = document.createElement('td'); new_cell.appendChild(document.createTextNode(JSON.parse(xhttp.responseText)[1])); new_row.appendChild(new_cell);
        new_cell = document.createElement('td'); new_cell.appendChild(document.createTextNode(JSON.parse(xhttp.responseText)[2])); new_row.appendChild(new_cell);
        new_cell = document.createElement('td'); new_cell.appendChild(document.createTextNode(JSON.parse(xhttp.responseText)[3])); new_row.appendChild(new_cell);
        tbdy.appendChild(new_row);
      }

    }

  }

  reader.readAsText(csv_list);

}
</script>

<p>&nbsp;</p>

<h3>Instructions</h3>
<p/>
Choose a CSV file -- <em>it must be in CSV format only</em> -- and upload it here. The file must have <em>NO</em> header row, and the last column must be a list of URLs including the leading "http://" or "https://" portions. If you wish to include additional columns, they must all be placed to the left of this URLs column. All columns in your CSV file will be included in the processed output file.
<p/>
<strong>To avoid taxing the web page servers, only the first 50 rows of any CSV file will be processed.</strong> If you need to process more than 50 rows, break up your list into multiple CSV files.
<p/>
Once you've hit the "Process URLs" button, do <em>NOT</em> press the button again. Just wait until the app has pinged all of the URLs, at which point a popup window will appear to save the results to a new CSV file. This new file will contain all of the original file's columns, as well as four additional ones:
<p/>
1) HTTP Code
<br>
2) HTTP Message
<br>
3) Redirect (if applicable): up to 5 successive redirects for any given URL will be pinged, and the last one will be returned
<br>
4) Search term existence (if applicable): if a search term has been entered, indicates whether it exists in the returned HTML

</div>
